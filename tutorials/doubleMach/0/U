/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 0 0 0 0 0 0];

internalField   #codeStream
{
    codeInclude
    #{
        #include "fvCFD.H"
    #};

    codeOptions
    #{
        -I$(LIB_SRC)/finiteVolume/lnInclude \
        -I$(LIB_SRC)/meshTools/lnInclude
    #};

    codeLibs
    #{
        -lmeshTools \
        -lfiniteVolume
    #};

    code
    #{
        const IOdictionary& d = static_cast<const IOdictionary&>(dict);
        const fvMesh& mesh = refCast<const fvMesh>(d.db());
        const scalar x_gap = 1.0/6.0;
        const scalar tan_60 = sqrt(3.0);
        const vector U_L = vector(8.25*sqrt(3.0)*0.5, -8.25*0.5, 0);
        vectorField UInit(mesh.nCells());
        forAll(UInit, cellI)
        {
            const scalar x = mesh.C()[cellI].x();
            const scalar y = mesh.C()[cellI].y();
            if ((x-x_gap)*tan_60 < y)
            {
                UInit[cellI] = U_L;
            }
            else
            {
                UInit[cellI] = vector::zero;
            }
        }
        writeEntry(os, UInit);
    #};
};

boundaryField
{
    inlet
    {
        type            codedFixedValue;
        value           uniform (0 0 0);
        name            UB;
        code
        #{
            const vectorField Cf = patch().Cf();
            vectorField& field = *this;
            const scalar t = this->db().time().value();
            const scalar x_gap = 1.0/6.0;
            const scalar tan_60 = sqrt(3.0);
            const scalar d = 20.0/sqrt(3.0)*t;
            const vector U_L = vector(8.25*sqrt(3.0)*0.5, -8.25*0.5, 0);
            forAll(Cf, faceI)
            {
                const scalar x = Cf[faceI].x();
                const scalar y = Cf[faceI].y();
                if ((x-x_gap-d)*tan_60 < y)
                {
                    field[faceI] = U_L;
                }
                else
                {
                    field[faceI] = vector::zero;
                }
            }
         #};
    }

    outlet
    {
        type            zeroGradient;
    }

    wall
    {
        type            zeroGradient;
    }

    defaultFaces
    {
        type            empty;
    }
}

// ************************************************************************* //
